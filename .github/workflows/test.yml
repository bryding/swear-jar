name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        redis-version: [7.0]
    
    services:
      redis:
        image: redis:${{ matrix.redis-version }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: |
          cd server
          npm ci

      - name: Install root dependencies for Jest
        run: npm install

      - name: Run backend unit tests
        run: npm test -- --testPathPattern=server/tests --coverage
        env:
          NODE_ENV: test
          AUTH_PIN: 12345
          REDIS_URL: redis://localhost:6379

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: backend
          name: backend-${{ matrix.node-version }}

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run frontend unit tests
        run: npm test -- --testPathPattern=tests/frontend --coverage
        env:
          NODE_ENV: test

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-${{ matrix.node-version }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: |
          cd server
          npm ci

      - name: Install root dependencies
        run: npm install

      - name: Wait for Redis
        run: |
          for i in {1..30}; do
            if redis-cli -h localhost -p 6379 ping; then
              echo "Redis is ready"
              break
            fi
            echo "Waiting for Redis... ($i/30)"
            sleep 2
          done

      - name: Run integration tests
        run: npm test -- --testPathPattern=tests/integration --coverage --verbose
        env:
          NODE_ENV: test
          AUTH_PIN: 12345
          REDIS_URL: redis://localhost:6379

      - name: Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: integration
          name: integration

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: |
          cd server
          npm ci

      - name: Run security audit
        run: |
          cd server
          npm audit --audit-level=high
          
      - name: Check for known vulnerabilities
        run: |
          cd server
          npm audit --audit-level=moderate --json > audit-results.json
          
      - name: Upload audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-audit-results
          path: server/audit-results.json

  build-test:
    name: Build and Deploy Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: |
          cd server
          npm ci --only=production

      - name: Test production build
        run: |
          cd server
          timeout 10s npm start || [ $? -eq 124 ]
        env:
          NODE_ENV: production
          PORT: 3000

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-audit, build-test]
    if: always()

    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Test | ${{ needs.build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.backend-tests.result }}" == "success" && 
                "${{ needs.frontend-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.build-test.result }}" == "success" ]]; then
            echo "🎉 All tests passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail workflow if critical tests failed
        if: needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.integration-tests.result == 'failure'
        run: |
          echo "Critical tests failed"
          exit 1